@page "/"
@page "/SchemaListLabels"
@using AMS_SCHEMA.Application.ExtensionMethods
@using AMS_SCHEMA.Class
@using AMS_SCHEMA.Pages.Schema.Relation
@using Olive

<div>

    <MudDrawerContainer>
        <MudDrawer @bind-Open="@open"
                   DisableOverlay="true"
                   Anchor="Anchor.Start"
                   Fixed="true"
                   Elevation="1"
                   Variant="@DrawerVariant.Mini"
                   ClipMode="DrawerClipMode.Never"
                   Style="top: 0; bottom: 0; position: fixed; overflow-y: scroll; overflow-x: hidden;">
            @if (open)
            {
                <MudIconButton Icon="@Icons.TwoTone.Close" Color="Color.Default" OnClick="() => open = false"></MudIconButton>
            }
            else
            {
                <MudChip Label="false" Style="opacity: 0;">

                </MudChip>
            }
            <MudSelect T="string" SelectedValuesChanged="SortOrderChanged" Label="Sort Order">
                <MudSelectItem Value="@("Alphabetical")"></MudSelectItem>
                <MudSelectItem Value="@("Custom")"></MudSelectItem>
            </MudSelect>
            <MudIconButton Icon="@Icons.TwoTone.Refresh" Color="Color.Success" OnClick="StateChangedClick"></MudIconButton>
            <MudSpacer />
            <MudIconButton Style="width:60px" Icon="@Icons.TwoTone.MenuOpen" Color="Color.Warning" OnClick="() => open = true"></MudIconButton>
        </MudDrawer>

        <MudDrawer @bind-Open="@openTop"
                   Class="top-drawer"
                   DisableOverlay="true"
                   Elevation="1"
                   Anchor="Anchor.Top"
                   Variant="@DrawerVariant.Temporary">
            <MudNavMenu>
                <MudStack Row="true" Spacing="0">
                    <MudIconButton Icon="@Icons.TwoTone.Close" Color="Color.Default" OnClick="()=>openTop=false"></MudIconButton>
                    <MudSelect @ref="DepartmentSelectorField" @bind-SelectedValues="SelectedDepartments"
                               Clearable="true"
                               Label="Department"
                               MultiSelection="true">
                        @if (_departments != null)
                        {
                            @foreach (var dep in _departments)
                            {
                                <MudSelectItem Value="dep">@dep.Title</MudSelectItem>
                            }
                        }
                    </MudSelect>
                    <MudStack Row="true" AlignItems="AlignItems.Center" Class="bg-opacity-10 bg-info rounded-2 p-1">
                        <MudText Typo="Typo.body1">Any</MudText>
                        <MudSwitch @bind-Checked="AndSelectDepartment"></MudSwitch>
                        <MudText Typo="Typo.body1">All</MudText>
                    </MudStack>

                    <MudTextField @ref="SearchTextField" Label="Search" @bind-Value="SearchText" DebounceInterval="500" OnDebounceIntervalElapsed="SearchSchema" Clearable="true" Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.Search"></MudTextField>

                </MudStack>

            </MudNavMenu>
        </MudDrawer>

        <MudDrawer @bind-Open="@openTop2"
                   Class="top-drawer"
                   DisableOverlay="true"
                   Elevation="1"
                   Anchor="Anchor.Top"
                   Variant="@DrawerVariant.Temporary">
            <MudNavMenu>
                <MudStack Row="false" Spacing="0">
                    <MudStack Row="true" Spacing="0">
                        <MudIconButton Icon="@Icons.TwoTone.Close" Color="Color.Default" OnClick="() => openTop2 = false"></MudIconButton>
                        <MudIconButton Icon="@Icons.TwoTone.CopyAll" Color="Color.Success" OnClick="CopyMatchToclipboardClick"></MudIconButton>
                        <MudSwitch @bind-Checked="IgnoreRelationNameInMatch" Label="Ignore Relation Name"></MudSwitch>
                        <MudButton Variant="Variant.Text" Color="Color.Warning" StartIcon="@Icons.TwoTone.OpenInFull" OnClick="OpenInNeo4jClick">
                            Open In Neo4J Browser
                        </MudButton>
                        <MudSpacer />
                        <MudButton Icon="@Icons.TwoTone.ChevronLeft" Color="Color.Default" OnClick="HistoryBackClick">Back</MudButton>
                    </MudStack>


                    <MudTextField Value="@xMatchValue" Lines="4" Label="MATCH"></MudTextField>

                </MudStack>

            </MudNavMenu>
        </MudDrawer>

        <MudScrollToTop ScrollBehavior="ScrollBehavior.Smooth">
            <MudFab Color="Color.Secondary" Icon="@Icons.Filled.ArrowCircleUp" />
        </MudScrollToTop>

        @if (history.Any())
        {
            <MudAppBar Bottom="true" Dense="true">
                @foreach (var step in history.Reverse())
                {
                    <MudIcon Icon="@Icons.Filled.ArrowRightAlt" Color="Color.Success"></MudIcon>
                    <MudChip Color="Color.Primary" Size="Size.Small" Label="true">
                        @step.Node.Name
                    </MudChip>
                }
            </MudAppBar>
        }

        <div>
            <MudToolBar Dense="true">
                <MudIconButton Icon="@Icons.TwoTone.Menu" Color="Color.Default" OnClick="()=>open=true"></MudIconButton>
                <MudIconButton Icon="@Icons.TwoTone.Search" Color="Color.Info" OnClick="()=>openTop = true"></MudIconButton>

                <h5>AMS NEO4J(DBMS) Labels Schema Definition</h5>
                <MudSpacer />
                <MudButton Variant="Variant.Text" Color="Color.Success" StartIcon="@Icons.TwoTone.Add" OnClick="CreateNewNodeClick">
                    Create New Node
                </MudButton>

                <MudButton Variant="Variant.Text" Color="Color.Success" StartIcon="@Icons.TwoTone.Gesture" OnClick="GenerateAll">
                    Generate All Entities
                </MudButton>
                <MudButton Variant="Variant.Text" Color="Color.Error" StartIcon="@Icons.TwoTone.Clear" OnClick="ClearCachClick">
                    Clear Cache

                </MudButton>

            </MudToolBar>


            <div>
                @if (_nodes == null)
                {
                    for (int i = 0; i < 5; i++)
                    {
                        <MudCard Class="mt-3" Elevation="4" Style="height:350px">
                            <MudCardHeader>
                                <MudStack Row="true" >
                                    <MudStack Class="m-0" Spacing="0">
                                        <MudText Typo="Typo.overline"><i>node:</i> <MudSkeleton SkeletonType="SkeletonType.Text"/> </MudText>
                                        <MudStack Row="false" Spacing="1">
                                            <MudPaper Elevation="0">
                                                <MudSkeleton SkeletonType="SkeletonType.Rectangle" ></MudSkeleton>
                                            </MudPaper>
                                        
                                        </MudStack>

                                    </MudStack>

                                </MudStack>

                            </MudCardHeader>
                            <MudCardContent>
                                <MudSkeleton />
                            </MudCardContent>
                        </MudCard>
                    }
                }else
                {

                    @foreach (var context in _nodes)
                    {

                        <MudCard id="@context.Name" Class="mt-3" Elevation="4">
                            <MudCardHeader>
                                <MudStack Row="true">
                                    <MudStack Class="m-0" Spacing="0">
                                        <MudText Typo="Typo.overline"><i>node:</i> <b>@context.Name - (@context.DisplayName)</b></MudText>
                                        <MudStack Row="false" Spacing="1">
                                            @foreach (var label in DataService.GetRootLabels(context))
                                            {
                                                <MudChip Color="Color.Info" OnClick="() => LabelClick(label)" Style="@($"background-color: {label.Color}".OnlyWhen(!label.Color.IsEmpty()))">
                                                    <LabelIconComponent Label="label"></LabelIconComponent>
                                                    <MudText Typo="Typo.h6">@label.Name</MudText>
                                                    &nbsp;- @label.DisplayName
                                                </MudChip>
                                            }
                                            <MudPaper Elevation="0">
                                                @foreach (var label in DataService.GetSubLabels(context))
                                                {
                                                    <MudChip Color="Color.Primary" Size="Size.Small" OnClick="() => LabelClick(label)" Style="@($"background-color: {label.Color}".OnlyWhen(!label.Color.IsEmpty()))">
                                                        <LabelIconComponent Label="label" DefaultIcon="@Icons.Filled.NewLabel"></LabelIconComponent>
                                                        <MudText Typo="Typo.body1">@label.Name</MudText>
                                                        &nbsp;- @label.DisplayName
                                                    </MudChip>
                                                }
                                            </MudPaper>


                                        </MudStack>


                                    </MudStack>

                                    <MudSpacer />

                                    <MudStack Row="true" Spacing="0">
                                        <MudChip Label="true" Variant="Variant.Text" Size="Size.Small">Inherits :</MudChip>
                                        <MudChip Label="false" Variant="Variant.Filled" Size="Size.Small" Style="@($"color:{Colors.Brown.Darken3}; background:{Colors.Yellow.Darken4};")" Icon="@Icons.Material.Filled.ArrowRight">
                                            @(context.Label?.InheriteFromLabel?.Name ?? "Base Class")
                                        </MudChip>
                                        @if (context.Label.IsAbstract is true)
                                        {
                                            <MudChip Label="false">
                                                <MudIcon Icon="@Icons.Material.Filled.Star" Color="Color.Warning"></MudIcon>
                                                Abstract
                                            </MudChip>
                                        }
                                        @if (context.Label.IsVirtual is true)
                                        {
                                            <MudChip Label="false">
                                                <MudIcon Icon="@Icons.Material.Outlined.Star" Color="Color.Warning"></MudIcon>
                                                Virtual
                                            </MudChip>
                                        }


                                    </MudStack>
                                    <MudStack Row="true" Spacing="0">
                                        <MudChip Label="true" Variant="Variant.Text" Size="Size.Small">Is in Microservice :</MudChip>
                                        <MudChip Label="false" Variant="Variant.Filled" Size="Size.Small" Style="@($"color:{Colors.Brown.Darken3}; background:{Colors.Orange.Darken4};")" Icon="@Icons.Material.Filled.DesignServices">
                                            @context.Label?.Microservice
                                        </MudChip>

                                    </MudStack>

                                    <MudStack Row="true" Class="m-0" Spacing="0">

                                        <MudChip Label="true" Variant="Variant.Text">Exists in department(s):</MudChip>
                                        <MudPaper Elevation="0">
                                            @foreach (var dep in @context.Departments)
                                            {
                                                <MudChip Class="category-chip" Size="Size.Small" Color="Color.Dark">@dep.Department?.Title</MudChip>
                                            }
                                        </MudPaper>
                                    </MudStack>
                                </MudStack>
                            </MudCardHeader>
                            <MudCardContent>
                                <MudGrid>
                                    <MudItem sm="12" md="6">
                                        @foreach (var label in DataService.GetRootLabels(context))
                                        {
                                            var relFroms = DataService.GetLabelRelationFroms(label);
                                            if (!relFroms.Any()) continue;
                                            <MudText Typo="Typo.subtitle1">
                                                Incoming Relations from
                                                <MudChip Label="true" Color="Color.Info" Size="Size.Small" Style="@($"background: {Colors.Blue.Lighten2}")">
                                                    @label.Name:
                                                </MudChip>
                                            </MudText>
                                            @foreach (var from in relFroms)
                                            {
                                                <SchemaExplorerRelationComponent Relation="from" Direction="RelDirection.Incoming" OnLabelClick="(eventArgs) => GotoLabelClick(eventArgs, context, from.To, from, RelDirection.Incoming)"/>
                                            }
                                        }
                                        @foreach (var label in DataService.GetSubLabels(context))
                                        {
                                            var relFroms = DataService.GetLabelRelationFroms(label);
                                            if (!relFroms.Any()) continue;
                                            <MudText Typo="Typo.subtitle2">
                                                Incoming Relations from
                                                <MudChip Label="true" Size="Size.Small" Color="Color.Primary" Style="@($"background: {Colors.DeepPurple.Lighten1}")">
                                                    @label.Name:
                                                </MudChip>
                                            </MudText>
                                            @foreach (var from in relFroms)
                                            {
                                                <SchemaExplorerRelationComponent Relation="from" Direction="RelDirection.Incoming" OnLabelClick="(eventArgs) => GotoLabelClick(eventArgs, context, from.To, from, RelDirection.Incoming)"/>
                                            }
                                        }

                                    </MudItem>
                                    <MudItem sm="12" md="6">
                                        @foreach (var label in DataService.GetRootLabels(context))
                                        {
                                            var relTos = DataService.GetLabelRelationTos(label);
                                            if (!relTos.Any()) continue;
                                            <MudText Typo="Typo.subtitle1">
                                                Outgoing Relations to
                                                <MudChip Label="true" Size="Size.Small" Color="Color.Info" Style="@($"background: {Colors.Blue.Lighten2}")">
                                                    @label.Name:
                                                </MudChip>
                                            </MudText>
                                            @foreach (var to in relTos)
                                            {
                                                <SchemaExplorerRelationComponent Relation="to" Direction="RelDirection.Outgoing" OnLabelClick="(eventArgs) => GotoLabelClick(eventArgs, context, to.From, to, RelDirection.Incoming)"/>
                                            }
                                        }

                                        @foreach (var label in DataService.GetSubLabels(context))
                                        {
                                            var relTos = DataService.GetLabelRelationTos(label);
                                            if (!relTos.Any()) continue;
                                            <MudText Typo="Typo.subtitle2">
                                                Outgoing Relations to
                                                <MudChip Label="true" Size="Size.Small" Color="Color.Primary" Style="@($"background: {Colors.DeepPurple.Lighten1}")">
                                                    @label.Name:
                                                </MudChip>
                                            </MudText>
                                            @foreach (var to in relTos)
                                            {
                                                <SchemaExplorerRelationComponent Relation="to" Direction="RelDirection.Outgoing" OnLabelClick="(eventArgs) => GotoLabelClick(eventArgs, context, to.From, to, RelDirection.Incoming)" />
                                            }
                                        }
                                    </MudItem>
                                    <MudItem sm="12" md="12">
                                        <MudPaper Class="m-0" Elevation="0">
                                            @if (!context.Label.Description.IsEmpty())
                                            {
                                                <MudChip Variant="Variant.Text" Label="true">Description:</MudChip>
                                                <MudText Class="ma-1 pa-2" Typo="Typo.subtitle2" Color="Color.Info">
                                                    @context.Label.Description
                                                </MudText>
                                            }
                                            <MudChip Variant="Variant.Text" Label="true">Properties:</MudChip>
                                            <MudStack Spacing="0">
                                                <MudPaper Elevation="0">
                                                    @foreach (var label in DataService.GetRootLabels(context))
                                                    {
                                                        <MudChip OnClick="() => OpenDataSampleDialogClick(label)" Style="@($"background-color: {label.Color}".OnlyWhen(!label.Color.IsEmpty()))" Color="Color.Info" Size="Size.Small">
                                                            <LabelIconComponent Label="label"></LabelIconComponent>
                                                            @label.Name :
                                                        </MudChip>
                                                        @foreach (var prop in label.PropertiesFull().OrderBy(x => x.Order))
                                                        {
                                                            <MudTooltip Arrow="true" Placement="Placement.Top" Color="Color.Info">
                                                                <ChildContent>
                                                                    <MudChip Label="true" Icon="@Utils.GetLabelPropertyIcon(label, prop)" Style="@Utils.GetLabelPropertyBgColor(label, prop)" Size="Size.Small">@prop.Name: @prop.DataType</MudChip>
                                                                </ChildContent>
                                                                <TooltipContent>
                                                                    @foreach (var tip in GetPropertyTooltipText(label, prop))
                                                                    {
                                                                        @if (!string.IsNullOrEmpty(tip))
                                                                        {
                                                                            <MudText Typo="Typo.body1">@tip</MudText>
                                                                        }
                                                                    }
                                                                </TooltipContent>
                                                            </MudTooltip>
                                                        }
                                                    }
                                                </MudPaper>

                                                <MudPaper Elevation="0">
                                                    @foreach (var label in DataService.GetSubLabels(context))
                                                    {

                                                        <MudChip OnClick="() => OpenDataSampleDialogClick(label)" Style="@($"background-color: {label.Color}".OnlyWhen(!label.Color.IsEmpty()))" Color="Color.Primary" Size="Size.Small">
                                                            <LabelIconComponent Label="label" DefaultIcon="@Icons.Filled.NewLabel" />
                                                            @label.Name
                                                        </MudChip>

                                                        @if (label.Properties is not { Count: > 0 }) continue;

                                                        @foreach (var prop in label.Properties.OrderBy(x => x.Order))
                                                        {
                                                            <MudTooltip Arrow="true" Placement="Placement.Top" Color="Color.Info">
                                                                <ChildContent>
                                                                    <MudChip Label="true" Icon="@Utils.GetLabelPropertyIcon(label, prop)" Style="@Utils.GetLabelPropertyBgColor(label, prop)" Size="Size.Small">@prop.Name: @prop.DataType</MudChip>
                                                                </ChildContent>
                                                                <TooltipContent>
                                                                    @foreach (var tip in GetPropertyTooltipText(label, prop))
                                                                    {
                                                                        @if (!string.IsNullOrEmpty(tip))
                                                                        {
                                                                            <MudText Typo="Typo.body1">@tip</MudText>
                                                                        }
                                                                    }
                                                                </TooltipContent>
                                                            </MudTooltip>
                                                        }
                                                    }
                                                </MudPaper>

                                            </MudStack>


                                        </MudPaper>
                                    </MudItem>
                                </MudGrid>
                            </MudCardContent>
                            <MudCardActions>
                                <MudButton Variant="Variant.Text" Color="Color.Info" StartIcon="@Icons.TwoTone.Circle" OnClick="() => EditNodeClick(context)">
                                    Edit
                                </MudButton>
                                <MudIconButton Icon="@Icons.TwoTone.GeneratingTokens" Color="Color.Success" OnClick="() => GenerateEntityRelatedFilesClick(context)"></MudIconButton>
                                <MudSpacer />
                                <MudIconButton Icon="@Icons.TwoTone.ArrowCircleUp" Color="Color.Default" OnClick="()=>MoveNodeUpClick(context)"></MudIconButton>
                                <MudIconButton Icon="@Icons.TwoTone.ArrowCircleDown" Color="Color.Default" OnClick="()=>MoveNodeDownClick(context)"></MudIconButton>
                                <MudIconButton Icon="@Icons.TwoTone.ArrowCircleRight" Color="Color.Default" OnClick="()=>MoveNodeLastClick(context)"></MudIconButton>
                            </MudCardActions>
                        </MudCard>



                    }
                }
            </div>

        </div>
    </MudDrawerContainer>


</div>