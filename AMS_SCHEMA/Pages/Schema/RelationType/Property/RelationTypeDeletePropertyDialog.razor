@using AMS.Model.Models
@using AMS.Model.Services
@using AMS_SCHEMA.Pages.Schema.Constraint
@using AMS_SCHEMA.Pages.Schema.Index
<MudDialog>
    <DialogContent>
        <MudText Typo="Typo.h5">Warning</MudText>
        <MudText Typo="Typo.body1">You are going to delete Relation Property :</MudText>
        <MudText Class="mud-paper ma-3" Typo="Typo.h6" Color="Color.Info">
            @Property.Name: @Property.DataType (@Property.DisplayName)
        </MudText>
        <MudDivider />
        @foreach (var constr in Property.Constraints)
        {
            <MudChip Label="true">With CONSTRAINT:</MudChip>
            <MudText Typo="Typo.body2" Color="Color.Info">
                @constr.Type Command: @constr.Command
            </MudText>
        }
        <MudDivider />
        @foreach (var idx in Property.Indices)
        {
            <MudChip Label="true">With INDEX: </MudChip>
            <MudText Typo="Typo.body2" Color="Color.Warning">
                @idx.Type Command: @idx.Command
            </MudText>
        }
        <MudSpacer></MudSpacer>
        <MudText Typo="Typo.h6" Class="ma-4" Color="Color.Error">
            Are you sure to delete this property ?
        </MudText>

    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Text" Color="Color.Error" StartIcon="@Icons.TwoTone.Check" OnClick="YesClick">
            Yes, I'm sure
        </MudButton>

        <MudButton Variant="Variant.Text" Color="Color.Warning" StartIcon="@Icons.TwoTone.Close" OnClick="NoClick">
            No
        </MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter]
    public MudDialogInstance DialogInstance { get; set; }

    [Inject]
    public IDialogService DialogService { get; set; }

    [Parameter]
    public AmsNeo4JNodeRelationPropery Property { get; set; }

    [Inject] DataService DataService { get; set; }

    void NoClick()
    {
        DialogInstance.Cancel();
    }

    async Task YesClick()
    {
        bool finalResult = true;
        var amsNeo4JNodeConstraints = Property.Constraints.ToArray();
        foreach (var constr in amsNeo4JNodeConstraints)
        {
            var dialogReference = DialogService.Show<DeleteConstraintDialog>("Delete Constraint",
                new DialogParameters
                    {
                        ["Constraint"] = constr
                    }
                , new DialogOptions
                    {
                        FullWidth = true,
                        MaxWidth = MaxWidth.Medium
                    });
            var result = await dialogReference.Result;
            if (result.Cancelled)
            {
                DialogInstance.Cancel();
                return;
            }
            var dialogResult = await dialogReference.GetReturnValueAsync<bool>();
            if (dialogResult is true)
            {
                finalResult &= dialogResult;
            }
        }

        var amsNeo4JNodeIndices = Property.Indices.ToArray();
        foreach (var idx in amsNeo4JNodeIndices)
        {
            var dialogReference = DialogService.Show<DeleteIndexDialog>("Delete Index",
                new DialogParameters
                    {
                        ["Index"] = idx
                    }
                , new DialogOptions
                    {
                        FullWidth = true,
                        MaxWidth = MaxWidth.Medium
                    });
            var result = await dialogReference.Result;
            if (result.Cancelled)
            {
                DialogInstance.Cancel();
                return;
            }
            var dialogResult = await dialogReference.GetReturnValueAsync<bool>();
            if (dialogResult is true)
            {
                finalResult &= dialogResult;
            }
        }
        if (finalResult)
        {
            DataService.DeleteRelationTypeProperty(Property);
            DialogInstance.Close(DialogResult.Ok(true, typeof(bool)));
            return;
        }
        DialogInstance.Close(DialogResult.Cancel());
    }

}
