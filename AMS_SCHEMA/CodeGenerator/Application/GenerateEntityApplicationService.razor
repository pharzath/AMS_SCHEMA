@using AMS.Model.Models
@using AMS_SCHEMA.Class

@using Olive
@using System.Web
@using AMS.Model
@using AMS.Model.Services
@using AMS_SCHEMA.Pages.Schema.Label.Module
@using System.Text
@implements IHaveDestinationFilePath
using MediatR;
using @(Module.Microservice.GetModule(AmsNeo4JMicroserviceModule.ModuleTypeEnum.API_Interface)).@Label.Name.ToPascalCase();
using @(Module.Microservice.GetModule(AmsNeo4JMicroserviceModule.ModuleTypeEnum.APPLICATION_CONTRACT)).@Label.Name.ToPascalCase();

using QOQNOS.CORE;

namespace @(Module).Services.@Label.Name.ToPascalCase();

public partial class @(Label.Name.ToPascalCase())Service : QoqnosServiceBase
{
    #region Header Code
    #endregion

    readonly IMediator _mediator;

    protected @(Label.Name.ToPascalCase())Service(IMediator mediator)
    {
        _mediator = mediator;
    }
    
    
@foreach (var handler in Handlers){
    <text>
        public async Task&lt;@(GetParamType(handler.ReturnType))> @(handler.Name.ToPascalCase())(@(handler.Name.ToPascalCase())Request request)
     {
         var result = await _mediator.Send(new @(handler.Name)Command {
         @foreach (var param in handler.Parameters)
         {
            <text>
                @GetParamName(param, true) = request.@GetParamName(param, true) ,
            </text>
         }
         });
        return result;
     }
 </text>}

    #region Footer Code
    #endregion

}

@code {


    [Parameter]
    public AmsNeo4JNodeLabel Label { get; set; }

    [Parameter]
    public AmsNeo4JMicroserviceModule Module { get; set; }

    [Parameter]
    public List<AmsNeo4JNodeRelation> FromRelations { get; set; }

    [Parameter]
    public IEnumerable<HandlerSettingItem> Handlers { get; set; }

    // [Parameter]
    // public List&lt;AmsNeo4JNodeConstraint> Constraints { get; set; }

    string GetParentClass()
    {
        if (Label.ParentLabel is { })
        {
            return Label.ParentLabel.Name.ToPascalCase();
        }

        return $"AbstractEntity&lt;{Label.Name.ToPascalCase()}, Guid>";
    }

    string IsNullable(AmsNeo4JNodeLabelProperty fld)
    {
        return fld.Label.Constraints.Any(x => x.Over == fld.Name && (x.Type == "IS NODE KEY" || x.Type == "IS NOT NULL"))
            ? ""
            : "?";
    }
    string GetToSafeName(AmsNeo4JNodeRelation rel)
    {
        if (rel.From.Name == rel.To.Name)
            return "Sub" + rel.To.Name;
        return rel.To.Name;
    }

    string GetParamType(MethodParameter param)
    {

        var typeName = "";
        typeName = param.IsSelfDto ? $"{Label.Name.ToPascalCase()}Dto" : param.Type;
        if (param.IsCollection)
            typeName = typeName.WithWrappers("IEnumerable<", ">");
        return typeName;
    }

    string GetCommandParameters(HandlerSettingItem handler)
    {
        var sb = handler.Parameters.Select(parameter => $"{GetParamType(parameter)} {GetParamName(parameter)}");
        return string.Join(',' , sb);
    }

    string GetParamName(MethodParameter parameter, bool propertyName = false)
    {
        var name = parameter.IsSelfDto ? $"{Label.Name.ToPascalCase()}Dto" : parameter.Name;
        if (parameter.IsCollection) name = name.ToPlural();
        return propertyName ? name.ToPascalCase() : name.ToCamelCase();
    }

    [Parameter]
    public string DestFilePath { get; set; }
}
