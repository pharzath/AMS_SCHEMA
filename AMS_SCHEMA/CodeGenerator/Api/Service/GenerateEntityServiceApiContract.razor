@using AMS.Model.Models
@using AMS_SCHEMA.Class

@using Olive
@using System.Web
@using AMS.Model.Services
using AMS.Model;
using QOQNOS.MS.API.Core.Classes;
using ServiceStack;

namespace AMS.Services.Contract._@Label.Name;

[Tag("AMS")]
[Route("/@(Label.Name)List", "Get")]
public class @(Label.Name)ListHandler 
    : IGet, IReturn&lt;@(Label.Name)ListHandler.Response>
{
    public class Response : ListResponse&lt;@(Label.Name)>
    {
    }
}

[Tag("AMS")]
[Route("/@(Label.Name)/{@(Label.Name)Id}", "Get")]
public class @(Label.Name)Handler 
    : IGet, IReturn&lt;@(Label.Name)ListHandler.Response>
{
    public Guid @(Label.Name)Id { get; set; }
    public class Response : SimpleResponse&lt;@(Label.Name)>
    {
    }
}

[Tag("AMS")]
[Route("/@(Label.Name)", "Post")]
public class @(Label.Name)CreateHandler 
    : @(Label.Name), IPost
{
}

[Tag("AMS")]
[Route("/@(Label.Name)", "Put")]
public class @(Label.Name)UpdateHandler 
    : @(Label.Name), IPut
{
}

[Tag("AMS")]
[Route("/@(Label.Name)/{@(Label.Name)Id}", "Delete")]
public class @(Label.Name)DeleteHandler 
    : IDelete, IReturn&lt;@(Label.Name)DeleteHandler.Response>
{
    public Guid @(Label.Name)Id { get; set; }

    public class Response : SimpleResponse&lt;bool>
    {
    }
}
//================================================================
@foreach (var rel in FromRelations)
{
<text>
[Tag("AMS")]
[Route("/@(rel.From.Name)@(rel.RelType.Name.ToPascalCase())@(rel.To.Name)Join/{@(rel.From.Name)Id}/{@(GetToSafeName(rel))Id}", "Post")]
public class @(rel.From.Name)@(rel.RelType.Name.ToPascalCase())@(rel.To.Name)JoinHandler
        : IPost, IReturn&lt;@(rel.From.Name)@(rel.RelType.Name.ToPascalCase())@(rel.To.Name)JoinHandler.Response>
{
    public Guid @(rel.From.Name)Id { get; set; }
    public Guid @(GetToSafeName(rel))Id { get; set; }

    public class Response : SimpleResponse { }
}
</text>
}
//================================================================
@foreach (var rel in FromRelations)
{
    <text>
[Tag("AMS")]
[Route("/@(rel.To.Name)@(rel.From.Name.ToPlural())_By@(rel.RelType.Name.ToPascalCase())_List/{@(GetToSafeName(rel))Id}", "Get")]
public class @(rel.To.Name)@(rel.From.Name.ToPlural())_By@(rel.RelType.Name.ToPascalCase())_ListHandler 
    : IGet, IReturn&lt;@(rel.To.Name)@(rel.From.Name.ToPlural())_By@(rel.RelType.Name.ToPascalCase())_ListHandler.Response>
{
    public Guid @(GetToSafeName(rel))Id { get; set; }
    
    public class Response : ListResponse&lt;@(rel.From.Name)>{ }
}
    </text>
}
//================================================================

@code {
    

    [Parameter]
    public AmsNeo4JNodeLabel Label { get; set; }

    [Parameter]
    public List<AmsNeo4JNodeRelation> FromRelations { get; set; }

    [Parameter]
    public List<AmsNeo4JNodeRelation> ToRelations { get; set; }

    string GetParentClass()
    {
        if (Label.ParentLabel is {})
        {
            return Label.ParentLabel.Name;
        }

        return $"AbstractEntity&lt;{Label.Name}, Guid>";
    }

    string IsNullable(AmsNeo4JNodeLabelProperty fld)
    {
        return fld.Label.Constraints.Any(x => x.Over == fld.Name && (x.Type == "IS NODE KEY" || x.Type == "IS NOT NULL")) 
            ? "" 
            : "?";
    }

    string GetToSafeName(AmsNeo4JNodeRelation rel)
    {
        if (rel.From.Name == rel.To.Name)
            return "Sub" + rel.To.Name;
        return rel.To.Name;
    }

}
