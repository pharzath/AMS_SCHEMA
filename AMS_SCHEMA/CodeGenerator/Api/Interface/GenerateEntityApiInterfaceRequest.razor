@using AMS.Model.Models
@using AMS_SCHEMA.Class

@using Olive
@using System.Web
@using AMS.Model
@using AMS.Model.Services
@using AMS_SCHEMA.Pages.Schema.Label.Module
@using System.Text
@implements IHaveDestinationFilePath

using Microsoft.AspNetCore.Mvc;

using @(Module.Microservice.GetModule(ModuleTypeEnum.Application)).@Label.Name.ToPascalCase();

namespace @(Module.Name).@(Label.Name.ToPascalCase());

public partial class @(Handler.Name)Request
{
@foreach (var param in Handler.Parameters)
{
    <text>
    public @GetParamType(param) @GetParamName(param, true) { get; set; }
    </text>
}

    #region Header Code - Handler
    #endregion

    public partial class Response
    {
        public @GetParamType(Handler.ReturnType) @GetParamName(Handler.ReturnType,true) { get; set; }

        #region Header Code - Response
        #endregion
    }

}


@code {
    [Parameter]
    public AmsNeo4JMicroserviceModule Module { get; set; }

    [Parameter]
    public AmsNeo4JNodeLabel Label { get; set; }

    [Parameter]
    public List<AmsNeo4JNodeRelation> Relations { get; set; }

    [Parameter]
    public HandlerSettingItem Handler { get; set; }

    // [Parameter]
    // public List<AmsNeo4JNodeConstraint> Constraints { get; set; }

    string GetParentClass()
    {
        if (Label.ParentLabel is { })
        {
            return Label.ParentLabel.Name.ToPascalCase();
        }

        return $"AbstractEntity<{Label.Name.ToPascalCase()}, Guid>";
    }

    string IsNullable(AmsNeo4JNodeLabelProperty fld)
    {
        return fld.Label.Constraints.Any(x => x.Over == fld.Name && (x.Type == "IS NODE KEY" || x.Type == "IS NOT NULL"))
            ? ""
            : "?";
    }

    string GetParamType(MethodParameter param)
    {

        var typeName = "";
        typeName = param.IsSelfDto ? $"{Label.Name.ToPascalCase()}Dto" : param.Type;
        if (param.IsCollection)
            typeName = typeName.WithWrappers("IEnumerable<", ">");
        return typeName;
    }

    string GetParamName(MethodParameter param, bool isPropertyName = true)
    {
        var labelName = Label.Name.ToPascalCase();
        if (!isPropertyName)
            labelName = labelName.ToCamelCase();

        if (param.IsSelfDto)
            return labelName + "Dto";


        var name = string.Format(param.Name ?? "", labelName, labelName).ToPascalCase();
        if (!isPropertyName)
            name = name.ToCamelCase();

        if (name.HasValue())
            return name;

        if (param.Type.ToLower() is "guid" or "int")
            return "Key";

        return "BAD_NAME";
    }

    [Parameter]
    public string DestFilePath { get; set; }
}
