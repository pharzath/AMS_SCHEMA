@using AMS_SCHEMA.CodeGenerator.Core;
@using AMS.Model
@using AMS_SCHEMA.Class
@using AMS_SCHEMA.Pages.Schema.Label.Module
@inherits AMS_SCHEMA.CodeGenerator.Core.CodeGeneratorTemplate
<GeneratorCode CodeGen="this" CodeGenHints="true">
	// CodeGenHints=@_codeGenHint
	<UsingCode>
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.UI.Services;
using Microsoft.Extensions.DependencyInjection;
<UsingCodeItem Type="ModuleTypeEnum.Application" PostFix="Services"/>
<UsingCodeItem Type="ModuleTypeEnum.Infrastructure"/>
<UsingCodeItem Type="ModuleTypeEnum.Infrastructure" PostFix="Context"/>
<UsingCodeItem Type="ModuleTypeEnum.Infrastructure" PostFix="Data"/>
<UsingCodeItem Type="ModuleTypeEnum.Infrastructure" PostFix="IdentityImplementations"/>
<UsingCodeItem Type="ModuleTypeEnum.Infrastructure" PostFix="Services"/>
<UsingCodeItem Type="ModuleTypeEnum.Model" PostFix="Entity"/>
using QOQNOS.Infrastructure.Logging;
using QOQNOS.SharedKernel;
using QOQNOS.SharedKernel.Constants;
using System.Text;
	</UsingCode>

<NamespaceCode  PostFix="ExtensionMethods" />

	<ClassCode Type="ClassCode.ClassTypeEnum.Class">
		<RegionCode Name="Header Code" />

		<RegionCode Name="Properties" />
	public static WebApplicationBuilder ConfigureQoqnosAuthApiEndpoints(this WebApplicationBuilder builder)
	{
		#region AspNetIdentity

		builder.Services
			.AddIdentity< ApplicationUser, IdentityRole>(options =>
			{
				options.Lockout.DefaultLockoutTimeSpan = TimeSpan.FromSeconds(5);
				options.Lockout.MaxFailedAccessAttempts = 3;
			})

			.AddEntityFrameworkStores< AppIdentityDbContext>()
			.AddDefaultTokenProviders();

		#endregion

		builder.Services.AddScoped< ITokenClaimsService, IdentityTokenClaimService>();

		QoqnosDependencies.ConfigureIdentityServices(builder.Configuration, builder.Services);

		builder.Services.AddScoped< UserService>();
		builder.Services.AddScoped< IEmailSender, QoqnosEmailSender>();
		builder.Services.AddScoped(typeof(IEmailSender< >), typeof(QoqnosEmailSender< >));
		builder.Services.AddScoped(typeof(IRepository< >), typeof(EfAuthRepository< >));
		builder.Services.AddScoped(typeof(IReadRepository< >), typeof(EfAuthRepository< >));
		builder.Services.AddScoped(typeof(IAppLogger< >), typeof(LoggerAdapter< >));

		#region Authentication

		var key = Encoding.ASCII.GetBytes(AuthorizationConstants.JWT_SECRET_KEY);
		builder.Services
			.AddAuthorization(options => {
			{

			}})

			.AddAuthentication(config =>
			{
				//config.DefaultScheme = JwtBearerDefaults.AuthenticationScheme;
				//config.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
			})
			// .AddJwtBearer(config =>
			// {
			// 	config.RequireHttpsMetadata = false;
			// 	config.SaveToken = true;
			// 	config.TokenValidationParameters = new TokenValidationParameters
			// 	{
			// 		ValidateIssuerSigningKey = true,
			// 		IssuerSigningKey = new SymmetricSecurityKey(key),
			// 		ValidateIssuer = false,
			// 		ValidateAudience = false
			// 	};
			// })
			;

		#endregion
		return builder;
	}

		<RegionCode Name="Footer Code"></RegionCode>
	</ClassCode>
</GeneratorCode>

@code {
	protected override string ClassNameFormat => "";


}
